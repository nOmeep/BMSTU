(define (simplify exp)
  (define (loop ys exp)
    (cond
      ((number? exp) exp)
      ((null? exp) ys)
      ((and (not (null? ys)) (eq? (car ys) '+) (equal? (car exp) 0)) (loop (cdr exp) '()))
      ((and (not (null? ys)) (eq? (car ys) '+) (equal? (cadr exp) 0)) (loop (car exp) '()))
      ((and (not (null? ys)) (eq? (car ys) '*) (equal? (car exp) 1)) (loop (cadr exp) '()))
      ((and (not (null? ys)) (eq? (car ys) '*) (equal? (car exp) 0)) (loop 0 '()))
      ((list? (car exp)) (loop (append ys (cons (loop '() (car exp)) '())) (cdr exp)))
      (else (loop (append ys (cons (car exp) '())) (cdr exp)))))
  (loop '() exp))

(simplify '(* x 0))
(simplify '(* 0 (+ x 1)))
(simplify '(+ x 0))
(simplify '(+ 0 x))
(simplify '(* 1 x))
(simplify '(+ (* x 1) 0))
(simplify '(+ 0 (* x 1)))
