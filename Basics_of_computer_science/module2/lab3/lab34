(define (factorize xs)
  (let ((sign (car xs)) ;params;
        (b (cadr (caddr xs)))
        (a (cadr (cadr xs)))
        (degree (caddr (cadr xs))))
    (if (equal? '+ sign) ; + with cube
        (list '* (list '+ a b)
              (list '+ (list 'expt a 2)
                    (list 'expt b 2)
                    (list '* a b)))
        (if (and (equal? '- sign) (not (equal? degree 2)));- with cube;
            (list '* (list '- a b)
                  (list '+ (list 'expt a 2)
                        (list '* a b)
                        (list 'expt b 2)))
            (list '* (list '- a b) (list '+ a b))))));square;

;TESTS;
(factorize '(- (expt x 2) (expt y 2))) 
   ;â‡’ (* (- x y) (+ x y))
(factorize '(- (expt (+ first 1) 2) (expt (- second 1) 2)))
   ;(* (- (+ first 1) (- second 1))
   ;     (+ (+ first 1) (- second 1)))
             
(eval (list (list 'lambda 
                      '(x y) 
                      (factorize '(- (expt x 2) (expt y 2))))
                1 2)
          (interaction-environment))
;-3;