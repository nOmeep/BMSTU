(define (list->set xs)
  (if (null? xs)
      '()
      (if (member (car xs) (cdr xs))
          (list->set (cdr xs))
          (cons (car xs) (list->set (cdr xs))))))

(define (set? xs)
  (if (null? xs)
      #t
      (if (member (car xs) (cdr xs))
          #f
          (set? (cdr xs)))))

;(define (set1 xs)
  ;(or (null? xs) (not (member (car xs) (cdr xs))) (set1 (cdr xs))))

(define (union xs ys)
  (if (null? xs)
      ys
      (if (member (car xs) ys)
          (union (cdr xs) ys)
          (cons (car xs) (union (cdr xs) ys)))))

(define (intersection xs ys)
  (if (or (null? xs) (null? ys))
      '()
      (if (not (member (car xs) ys))
          (intersection (cdr xs) ys)
          (cons (car xs) (intersection (cdr xs) ys)))))

(define (difference xs ys)
  (if (null? xs)
      '()
      (if (member (car xs) ys)
          (difference (cdr xs) ys)
          (cons (car xs) (difference (cdr xs) ys)))))

(define (symmetric-difference xs ys)
  (append (difference xs ys) (difference ys xs)))

(define (set-eq? xs ys)
  (and (equal? (difference xs ys) '()) (equal? (difference ys xs) '())))