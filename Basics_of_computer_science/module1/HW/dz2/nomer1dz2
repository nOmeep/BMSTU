(define (my-range a b d)
  (if (< (+ a d) b)
      (cons a (my-range (+ a d) b d))
      (cons a '())
  )
)

(define (my-flatten spisok)
  (if (null? spisok)
      '()
      (if (pair? spisok)
          (append (my-flatten (car spisok)) (my-flatten (cdr spisok)))
          (list spisok))))

(define (my-element? x xs)
  (and (not (null? xs))
       (or (equal? (car xs) x) (my-element? x (cdr xs)))))

(define (my-filter pred? xs)
  (if (null? xs)
      '()
      (if (pred? (car xs))
          (cons (car xs) (my-filter pred? (cdr xs)))
          (my-filter pred? (cdr xs)))))

(define (my-fold-left op xs)
  (define (loop op x xs)
    (if (null? xs)
        x
        (loop op (op x (car xs)) (cdr xs))))
  (loop op (car xs) (cdr xs)))

(define (my-fold-right op xs)
  (define (loop op x xs)
    (if (null? xs)
        x
        (loop op (op x (car xs)) (cdr xs))))
  (loop op (car (reverse xs)) (cdr (reverse xs))))


  
      